diff --git a/game/audio/ambience/ambientaudioentity.cpp b/game/audio/ambience/ambientaudioentity.cpp
index 1a9eec10..32680038 100644
--- a/game/audio/ambience/ambientaudioentity.cpp
+++ b/game/audio/ambience/ambientaudioentity.cpp
@@ -7767,15 +7767,21 @@ void audAmbientAudioEntity::SerialiseString(char* xmlMessage, char* tempbuffer,
 void audAmbientAudioEntity::SerialiseSoundName(char* xmlMessage, char* tempbuffer, const char* elementName, u32 hash, bool defaultToNull)
 {
 	const Sound* soundPtr = g_AudioEngine.GetSoundManager().GetFactory().GetMetadataPtr(hash);
+	(void)soundPtr;
 
-	if(soundPtr)
+#if __USEDEBUGAUDIO
+	if (soundPtr)
 	{
-		const audMetadataManager &metadataManager = SOUNDFACTORY.GetMetadataManager();
+		const audMetadataManager& metadataManager = SOUNDFACTORY.GetMetadataManager();
 		SerialiseString(xmlMessage, tempbuffer, elementName, metadataManager.GetObjectNameFromNameTableOffset(soundPtr->NameTableOffset));
 	}
-	else if(defaultToNull)
+	else
+#endif
 	{
-		SerialiseString(xmlMessage, tempbuffer, elementName, "NULL_SOUND");
+		if (defaultToNull)
+		{
+			SerialiseString(xmlMessage, tempbuffer, elementName, "NULL_SOUND");
+		}
 	}
 }
 
@@ -8051,13 +8057,16 @@ void audAmbientAudioEntity::MoveRuleToCurrentCoords(bool interiorRelative)
 		SerialiseInt(xmlMsg, tmpBuf, "MinRepeatTimeVariance", ruleData->MinRepeatTimeVariance);
 
 		const Sound* soundPtr = g_AudioEngine.GetSoundManager().GetFactory().GetMetadataPtr(ruleData->Sound);
+		(void)soundPtr;
 
-		if(soundPtr)
+#if __USEDEBUGAUDIO
+		if (soundPtr)
 		{
-			const audMetadataManager &metadataManager = SOUNDFACTORY.GetMetadataManager();
+			const audMetadataManager& metadataManager = SOUNDFACTORY.GetMetadataManager();
 			SerialiseString(xmlMsg, tmpBuf, "Sound", metadataManager.GetObjectNameFromNameTableOffset(soundPtr->NameTableOffset));
 		}
 		else
+#endif
 		{
 			SerialiseString(xmlMsg, tmpBuf, "Sound", "NULL_SOUND");
 		}
diff --git a/game/audio/ambience/water/audshorelineOcean.cpp b/game/audio/ambience/water/audshorelineOcean.cpp
index 82ca2571..00d57588 100644
--- a/game/audio/ambience/water/audshorelineOcean.cpp
+++ b/game/audio/ambience/water/audshorelineOcean.cpp
@@ -928,7 +928,7 @@ void audShoreLineOcean::UpdateOceanBeachSound(const Vector3 &centrePoint,const V
  		GetSoundsRefs(soundRef,Right);
  		UpdateOceanSound(soundRef,Right,rightPoint);
  	}
-#if __BANK
+#if __USEDEBUGAUDIO
 	
 	if(sm_DrawWaterBehaviour)
 	{
diff --git a/game/audio/ambience/water/audshorelineRiver.cpp b/game/audio/ambience/water/audshorelineRiver.cpp
index 85595848..fe8ef727 100644
--- a/game/audio/ambience/water/audshorelineRiver.cpp
+++ b/game/audio/ambience/water/audshorelineRiver.cpp
@@ -890,7 +890,7 @@ void audShoreLineRiver::UpdateRiverSounds(const u8 closestRiverIdx)
 			GetSoundsRefs((RiverType)sm_ClosestShores[closestRiverIdx].riverSounds.currentShore[Right]->GetRiverSettings()->RiverType,soundRef,Right);
 			UpdateRiverSound(soundRef,Right,sm_ClosestShores[closestRiverIdx].riverSounds.ending[Right],rightPoint,closestRiverIdx);
 		}
-#if __BANK
+#if __USEDEBUGAUDIO
 		if(sm_DrawWaterBehaviour)
 		{
 			char txt[256];
diff --git a/game/audio/environment/environment.cpp b/game/audio/environment/environment.cpp
index 5c3a90cc..7232cb1b 100644
--- a/game/audio/environment/environment.cpp
+++ b/game/audio/environment/environment.cpp
@@ -1846,7 +1846,7 @@ void naEnvironment::UpdateInterestingTrees()
 		}
 		UpdateBgTreeSound(m_CurrentSoundIdx[i], i,numTrees,(u8)type,avgDistance,soundDir);
 	}
-#if __BANK
+#if __USEDEBUGAUDIO
 	if(sm_DrawBgTreesInfo)
 	{
 		for (u32 i = 0; i < m_NumLocalTrees; i ++)
diff --git a/game/audio/northaudioengine.cpp b/game/audio/northaudioengine.cpp
index de6aef9b..d824ac38 100644
--- a/game/audio/northaudioengine.cpp
+++ b/game/audio/northaudioengine.cpp
@@ -753,7 +753,7 @@ void audNorthAudioEngine::GenerateMemoryReport(const char *destFileName)
 
 RAGE_DEFINE_SUBCHANNEL(Audio,NorthAudio)
 
-#if __ASSERT
+#if __USEDEBUGAUDIO
 class audNorthAudioEngineThreadVerifier : public audControllerThreadVerifier
 {
 public:
@@ -902,7 +902,7 @@ bool audNorthAudioEngine::InitClass()
 	}
 #endif
 
-	ASSERT_ONLY(sm_AudioController.SetThreadVerifier(&g_NorthAudioThreadVerifier));
+	DEBUGAUDIO_ONLY(sm_AudioController.SetThreadVerifier(&g_NorthAudioThreadVerifier));
 
 #if __DEV
 	g_AssertOnSoundPoolFull = false;
@@ -5552,6 +5552,7 @@ void audNorthAudioEngine::DebugDrawSlowMo()
 
 	drawMgr.PopSection();
 
+#if __USEDEBUGAUDIO
 	formatf(sectionHeader, "Current SlowMo Mode");
 	drawMgr.PushSection(sectionHeader);
 	formatf(sectionHeader, "%s: %s : %s", SlowMoType_ToString(sm_SlowMoMode), sm_SlowMoScene ? DYNAMICMIXMGR.GetMetadataManager().GetObjectNameFromNameTableOffset(sm_SlowMoScene->GetSceneSettings()->NameTableOffset): NULL, sm_SlowMoSound ? g_AudioEngine.GetSoundManager().GetFactory().GetMetadataManager().GetObjectNameFromNameTableOffset(sm_SlowMoSound->GetNameTableOffset()): NULL);
@@ -5559,7 +5560,8 @@ void audNorthAudioEngine::DebugDrawSlowMo()
 	drawMgr.DrawLine(sectionHeader);
 
 	drawMgr.PopSection();
-	
+#endif
+
 	grcFont::GetCurrent().SetInternalColor( prevColor );
 	grcLighting(bOldLighting);
 
diff --git a/game/audio/scriptaudioentity.cpp b/game/audio/scriptaudioentity.cpp
index 4070da59..6bb8c5d1 100644
--- a/game/audio/scriptaudioentity.cpp
+++ b/game/audio/scriptaudioentity.cpp
@@ -7968,7 +7968,7 @@ void audScriptAudioEntity::PlayStreamFromEntityInternal(CEntity *entity)
 				REPLAY_ONLY(CReplayMgr::ReplayRecordPlayStreamFromEntity(entity, m_StreamSound, sm_CurrentStreamName, sm_CurrentStartOffset, sm_CurrentSetName);)
 			}
 #endif
-#if __BANK
+#if __USEDEBUGAUDIO
 			if(g_ScriptedStreamSpew)
 			{
 				audDebugf1("[audScriptedStream] Playing stream: %s from entity",SOUNDFACTORY.GetMetadataManager().GetObjectNameFromNameTableOffset(m_StreamSound->GetBaseMetadata()->NameTableOffset));
@@ -8020,7 +8020,7 @@ void audScriptAudioEntity::PlayStreamFrontendInternal()
 			REPLAY_ONLY(CReplayMgr::ReplayRecordPlayStreamFrontend(m_StreamSound, sm_CurrentStreamName, sm_CurrentStartOffset, sm_CurrentSetName);)
 		}
 #endif
-#if __BANK
+#if __USEDEBUGAUDIO
 		if(g_ScriptedStreamSpew)
 		{
 			audDebugf1("[audScriptedStream] Playing stream: %s frontend",SOUNDFACTORY.GetMetadataManager().GetObjectNameFromNameTableOffset(m_StreamSound->GetBaseMetadata()->NameTableOffset));
@@ -8037,7 +8037,9 @@ const u32 audScriptAudioEntity::GetStreamPlayTime() const
 {
 	if(m_StreamSound && m_ScriptStreamState == AUD_SCRIPT_STREAM_PLAYING)
 	{
+#if __USEDEBUGAUDIO
 		if(naVerifyf(m_StreamSound->GetSoundTypeID() == StreamingSound::TYPE_ID,"Script stream %s, with a parent sound that it's not a stream sound. Please bug default audio.",g_AudioEngine.GetSoundManager().GetFactory().GetMetadataManager().GetObjectName(m_StreamSound->GetBaseMetadata()->NameTableOffset)))
+#endif
 		{
 			return ((audStreamingSound*)m_StreamSound)->GetCurrentPlayTimeOfWave();				
 		}
@@ -8114,7 +8116,7 @@ void audScriptAudioEntity::PlayStreamFromPositionInternal(const Vector3 &pos)
 			REPLAY_ONLY(CReplayMgr::ReplayRecordPlayStreamFromPosition(pos, m_StreamSound, sm_CurrentStreamName, sm_CurrentStartOffset, sm_CurrentSetName);)
 		}
 #endif
-#if __BANK
+#if __USEDEBUGAUDIO
 		if(g_ScriptedStreamSpew)
 		{
 			audDebugf1("[audScriptedStream] Playing stream: %s from position",SOUNDFACTORY.GetMetadataManager().GetObjectNameFromNameTableOffset(m_StreamSound->GetBaseMetadata()->NameTableOffset));
diff --git a/game/debug/Debug.cpp b/game/debug/Debug.cpp
index 7c56f7aa..d893c0a2 100644
--- a/game/debug/Debug.cpp
+++ b/game/debug/Debug.cpp
@@ -1286,6 +1286,7 @@ void CDebug::HandleBugRequests()
 	if (ms_disableSpaceBugScreenshots)
 		forceIgnoreScreenshot = true;
 
+	/*
 	if(CControlMgr::GetKeyboard().GetKeyJustDown(KEY_SPACE, KEYBOARD_MODE_DEBUG, "Add bug to bugstar", "bugstar"))
 	{
 		STRVIS_MARK_BUG_REPORTED();
@@ -1317,7 +1318,7 @@ void CDebug::HandleBugRequests()
 		CControlMgr::GetKeyboard().FakeKeyPress(KEY_F9);
 #endif // RSG_ORBIS
 	}
-	
+
 	if(CControlMgr::GetKeyboard().GetKeyJustDown(KEY_SPACE, KEYBOARD_MODE_DEBUG_CTRL, "Add bug to bugstar without video", "bugstar"))
 	{	
 		STRVIS_MARK_BUG_REPORTED();
@@ -1339,7 +1340,7 @@ void CDebug::HandleBugRequests()
 	{
 		CBugstarIntegration::SetStreamingVideoSettings();
 	}
-
+	*/
 #if __BANK
 	if (CAILogManager::ShouldSpewOutputLogWhenBugAdded())
 	{
@@ -1351,14 +1352,14 @@ void CDebug::HandleBugRequests()
 	}
 
 #endif // __BANK	
-
+	/*
 #if SYSTMCMD_ENABLE
 	if(PARAM_rockstartargetmanager.Get() && CControlMgr::GetKeyboard().GetKeyJustDown(KEY_SPACE, KEYBOARD_MODE_DEBUG_CNTRL_ALT, "Add bug with dump file"))
 	{
 		sysTmCmdCreateDump();
 	}
 #endif // SYSTMCMD_ENABLE
-	
+
 	if(CControlMgr::GetKeyboard().GetKeyJustDown(KEY_LBRACKET, KEYBOARD_MODE_DEBUG, "Add with debug text to bugstar", "bugstar"))
 	{
 		requestAddBug = true;
@@ -1369,7 +1370,7 @@ void CDebug::HandleBugRequests()
 		requestAddBug = true;
 		bugType = BUG_TYPE_LEVELS;
 	}
-
+	*/
 #if BUGSTAR_INTEGRATION_ACTIVE
 	static sysTimer lastBugTime;
 
diff --git a/game/network/Shop/NetworkShopping.cpp b/game/network/Shop/NetworkShopping.cpp
index 745ded72..18d949ea 100644
--- a/game/network/Shop/NetworkShopping.cpp
+++ b/game/network/Shop/NetworkShopping.cpp
@@ -1828,7 +1828,7 @@ void CNetworkShoppingMgr::Init(sysMemAllocator* allocator)
 
 	sysMemAllocator::SetCurrent(*previousallocator);
 
-#if	__DEV
+#if	!__PACKEDDEBUG
 	PARSER.LoadObject("common:/data/debug/networkshop_debug", "meta", *this);
 #else
 	PARSER.LoadObject("common:/data/networkshop", "meta", *this);
diff --git a/game/scene/ExtraContent.cpp b/game/scene/ExtraContent.cpp
index 75e22b99..ac83d74d 100644
--- a/game/scene/ExtraContent.cpp
+++ b/game/scene/ExtraContent.cpp
@@ -98,7 +98,7 @@ RAGE_DEFINE_CHANNEL(dlc, DIAG_SEVERITY_DISPLAY, DIAG_SEVERITY_DISPLAY, DIAG_SEVE
 #define TITLE_UPDATE_RPF_PATH "update:/update.rpf"
 #define TITLE_UPDATE2_RPF_PATH "update:/update2.rpf"
 #else // NG
-#if __FINAL
+#if __PACKEDDEBUG
 #define TITLE_UPDATE_RPF_PATH "update/update.rpf"
 #define TITLE_UPDATE2_RPF_PATH "update/update2.rpf"
 #else
diff --git a/game/scene/FileLoader.cpp b/game/scene/FileLoader.cpp
index 32173263..698c1b69 100644
--- a/game/scene/FileLoader.cpp
+++ b/game/scene/FileLoader.cpp
@@ -295,6 +295,7 @@ bool CFileLoader::IsValidRpfType(const CDataFileMgr::DataFileType &type)
 	return false;
 }
 
+PARAM(forceReleaseScripts, "Forces release scripts. Only works in release builds.");
 
 #if RSG_PC||!__FINAL
 #define FINAL_PCONLY(x) x
@@ -308,10 +309,8 @@ bool CFileLoader::CheckFileForReplacements(const char* finalName,char* replaceme
 	const char *filename = ASSET.FileName(finalName);
 	size_t string_length_of_path = filename - finalName;
 	bool optionalReplacement = true;
-
 	// Set this to force using script_rel, useful when you have a disc burned with both types of scripts.
 #define FORCE_SCRIPT_REL __FINAL || 0
-
 #if !__FINAL
 	const char *overrideScriptRpfName = 0;
 	const char *overrideDlcScriptRpfName = 0;
@@ -322,36 +321,39 @@ bool CFileLoader::CheckFileForReplacements(const char* finalName,char* replaceme
 	//Checks for script.rpf filename overrides
 	if(stricmp(filename,"script.rpf")==0||stricmp(filename,"script_install.rpf")==0||stricmp(filename,"script_release.rpf")==0)
 	{
-#if FORCE_SCRIPT_REL
-		//	Add 4 below for the length of "_rel" suffix
-		if (Verifyf( ( strlen(finalName) + 4) < RAGE_MAX_PATH, "CFileLoader::LoadRpfFiles - path to override script rpf is too long"))
+		if (PARAM_forceReleaseScripts.Get())
 		{
-			safecpy(replacementName, finalName, string_length_of_path);
-			strcat(replacementName, "/");
-			strcat(replacementName, filename);
-			ASSET.RemoveExtensionFromPath(replacementName,RAGE_MAX_PATH,replacementName);
-			strcat(replacementName, "_rel.rpf");
-			isReplaced = true;
-			optionalReplacement = false;
-			Displayf("Script pack %s being replaced with %s",finalName,replacementName);
-		}
-#else
-		const char* overrideName = (strnicmp(finalName,"dlc",3)!=0) ? overrideScriptRpfName : overrideDlcScriptRpfName;
-		if(overrideName)
-		{
-			//	Add 5 below for the length of ".rpf" and for a forward slash before the filename
-			if (Verifyf( (string_length_of_path + strlen(overrideName) + 5) < RAGE_MAX_PATH, "CFileLoader::LoadRpfFiles - path to override script rpf is too long"))
+			//	Add 4 below for the length of "_rel" suffix
+			if (Verifyf((strlen(finalName) + 4) < RAGE_MAX_PATH, "CFileLoader::LoadRpfFiles - path to override script rpf is too long"))
 			{
 				safecpy(replacementName, finalName, string_length_of_path);
 				strcat(replacementName, "/");
-				strcat(replacementName, overrideName);
-				strcat(replacementName, ".rpf");
+				strcat(replacementName, filename);
+				ASSET.RemoveExtensionFromPath(replacementName, RAGE_MAX_PATH, replacementName);
+				strcat(replacementName, "_rel.rpf");
+				isReplaced = true;
+				optionalReplacement = false;
+				Displayf("Script pack %s being replaced with %s", finalName, replacementName);
+			}
+		}
+		else
+		{
+			const char* overrideName = (strnicmp(finalName, "dlc", 3) != 0) ? overrideScriptRpfName : overrideDlcScriptRpfName;
+			if (overrideName)
+			{
+				//	Add 5 below for the length of ".rpf" and for a forward slash before the filename
+				if (Verifyf((string_length_of_path + strlen(overrideName) + 5) < RAGE_MAX_PATH, "CFileLoader::LoadRpfFiles - path to override script rpf is too long"))
+				{
+					safecpy(replacementName, finalName, string_length_of_path);
+					strcat(replacementName, "/");
+					strcat(replacementName, overrideName);
+					strcat(replacementName, ".rpf");
+					isReplaced = true;
+				}
+				optionalReplacement = false;
 				isReplaced = true;
 			}
-			optionalReplacement = false;
-			isReplaced = true;
 		}
-#endif
 	}
 
 #if !__FINAL
diff --git a/game/shaders/ShaderLib.cpp b/game/shaders/ShaderLib.cpp
index 7bab76cf..83b0a356 100644
--- a/game/shaders/ShaderLib.cpp
+++ b/game/shaders/ShaderLib.cpp
@@ -244,7 +244,11 @@ namespace rage
 void CShaderLib::LoadInitialShaders()
 {
 	grcEffect *effect = NULL;
-	ASSET.PushFolder("update2:/common/shaders");	
+#if __FINAL
+	ASSET.PushFolder("update2:/common/shaders");
+#else
+	ASSET.PushFolder("common:/shaders");
+#endif
 
 	effect = grcEffect::Create("im");	
 	Assert(effect);
diff --git a/game/system/FileMgr.cpp b/game/system/FileMgr.cpp
index 6c814463..fafab9f5 100644
--- a/game/system/FileMgr.cpp
+++ b/game/system/FileMgr.cpp
@@ -114,7 +114,7 @@
 	#define PLATFORM_DEBUG_PACK     "xboxone_debug.rpf"	// contains all unshippable data for packaged non-final builds
 #else	// pc, anything else
 	#define DISKROOT_DIRECTORY	    ""
-	#if __FINAL
+	#if __PACKEDDEBUG
 		#define ROOT_DIRECTORY	    ""
 	#else
 		#define ROOT_DIRECTORY	    RS_BUILDBRANCH "/"
@@ -131,7 +131,7 @@
 #endif
 #endif //__XENON
 
-#if !__FINAL
+#if !__PACKEDDEBUG
 #define COMMON_DEBUG_PACK           "common_debug.rpf"	// contains all unshippable data for packaged non-final builds
 #endif	// !__FINAL
 
@@ -147,7 +147,7 @@
 #define AUDIO_DIRECTORY			    PLATFORM_DIRECTORY "audio/"
 #endif
 
-#if RSG_BANK 
+#if !__PACKEDDEBUG
 #define AUDIO_RPF				    "audio.rpf"
 #define AUDIO_PACKLIST			    "packlist.txt"
 #else
@@ -208,7 +208,7 @@ fiDeviceRelative gGameCacheDevice;
 fiDeviceRelative gAudioDevice;
 fiDeviceCrc gCrcPlatformDevice;
 fiDeviceCrc gCrcCommonDevice;
-#if !__FINAL
+#if !__PACKEDDEBUG
 fiDeviceRelative gAssetsDevice;
 fiDeviceRelative gArtDevice;
 fiDeviceRelative gDebugDevice;			// mounted as debug: typically from the hosted build directory (eg, /<project>/build/<branch>)
@@ -699,7 +699,7 @@ void CFileMgr::SetupDevices()
 #endif
 #else
 // pc final builds assume packaged config - may switch this to __MASTER only
-#if __FINAL
+#if __PACKEDDEBUG
     PARAM_commonpack.Set(DISKROOT_DIRECTORY "common.rpf");
     PARAM_platformpack.Set(DISKROOT_DIRECTORY PLATFORM_PACK);
     PARAM_audiopack.Set(DISKROOT_DIRECTORY AUDIO_DIRECTORY AUDIO_RPF);
@@ -735,7 +735,7 @@ void CFileMgr::SetupDevices()
 	PARAM_audiofolder.Get(pAudioFolder);
 
 	// Indicate whether or not this is a packaged build.
-#if !__FINAL
+#if !__PACKEDDEBUG
 	sysBootManager::SetIsPackagedBuild(PARAM_platformpack.Get() && PARAM_commonpack.Get());
 
 	if (PARAM_commonpack.Get())
@@ -844,7 +844,7 @@ void CFileMgr::SetupDevices()
 		gCrcPlatformDevice.MountAs("platformcrc:/");
 	}
 
-#if !__FINAL
+#if !__PACKEDDEBUG
 	if(!PARAM_nodebugpack.Get() && (PARAM_commonpack.Get() || PARAM_platformpack.Get()))
 	{
 		if(PARAM_commonpack.Get())
@@ -887,7 +887,7 @@ void CFileMgr::SetupDevices()
 	
 	gUserDevice.MountAs("user:/");
 
-	// Create app data folder
+	// Create app data folder_
 	ASSET.CreateLeadingPath(GetAppDataRootDirectory());
 	gAppDataDevice.Init(GetAppDataRootDirectory(), false);
 	gAppDataDevice.MountAs("appdata:/");
@@ -917,7 +917,7 @@ void CFileMgr::SetupDevices()
 		gAudioDevice.MountAs("audio:/");
 	}
 
-#if !__FINAL
+#if !__PACKEDDEBUG
 	gAssetsDevice.Init(GetAssetsFolder(), false);
 	gAssetsDevice.MountAs("assets:/");
 	gArtDevice.Init(GetArtFolder(), false);
@@ -932,7 +932,7 @@ void CFileMgr::SetupDevices()
 
 	CExtraContentManager::MountUpdate();
 
-	if (__FINAL || sysBootManager::IsBootedFromDisc() || packedCommon)
+	if (__PACKEDDEBUG || sysBootManager::IsBootedFromDisc() || packedCommon)
 	{
 		Displayf("Game cache is using read-only device - if you didn't prebuild your cache, you'll have a problem.");
 		extern fiDeviceRelative gTitleUpdateCommon2;
@@ -940,7 +940,7 @@ void CFileMgr::SetupDevices()
 	}
 	else
 	{
-#if !__FINAL && RSG_PC	// definitely helps with pc, but may want to enable for other platforms, too
+#if !__PACKEDDEBUG && RSG_PC	// definitely helps with pc, but may want to enable for other platforms, too
 		const char* pUpdateFolder;
 		if (PARAM_update.Get(pUpdateFolder))
 		{
diff --git a/game/text/TextFile.cpp b/game/text/TextFile.cpp
index 69f6dc84..81121977 100644
--- a/game/text/TextFile.cpp
+++ b/game/text/TextFile.cpp
@@ -278,7 +278,7 @@ const char* CTextFile::GetLanguageFile(char *buffer, size_t bufferSize, bool bUs
 
 	PARAM_langfilesuffix.Get(suffix);
 
-#if __FINAL
+#if __PACKEDDEBUG
 	suffix = "_rel";
 #endif
 
diff --git a/rage/base/src/audioengine/enginedefs.h b/rage/base/src/audioengine/enginedefs.h
index 79da8ff8..5f9681cd 100644
--- a/rage/base/src/audioengine/enginedefs.h
+++ b/rage/base/src/audioengine/enginedefs.h
@@ -7,7 +7,7 @@
 #ifndef AUD_ENGINE_DEFS_H
 #define AUD_ENGINE_DEFS_H
 
-#define AUD_SUPPORT_RAVE_EDITING (__BANK)
+#define AUD_SUPPORT_RAVE_EDITING (__USEDEBUGAUDIO)
 
 #if AUD_SUPPORT_RAVE_EDITING
 #define SUPPORT_RAVE_EDITING_ONLY(x) x
diff --git a/rage/base/src/audioengine/entity.cpp b/rage/base/src/audioengine/entity.cpp
index 37f5f98d..394ad007 100644
--- a/rage/base/src/audioengine/entity.cpp
+++ b/rage/base/src/audioengine/entity.cpp
@@ -374,7 +374,7 @@ bool audEntity::CreateAndPlaySound(const audMetadataRef metadataRef, const audSo
 
 bool audEntity::AddBatchedSoundRequest(audMetadataRef soundMetadataRef, const audSoundInitParams *initParams)
 {
-#if RSG_ASSERT	
+#if __USEDEBUGAUDIO	
 	if(initParams)
 	{
 		if(initParams->EnvironmentGroup || initParams->Tracker)
diff --git a/rage/base/src/audioengine/metadatamanager.cpp b/rage/base/src/audioengine/metadatamanager.cpp
index 6cb2c11b..80ded326 100644
--- a/rage/base/src/audioengine/metadatamanager.cpp
+++ b/rage/base/src/audioengine/metadatamanager.cpp
@@ -209,7 +209,7 @@ bool audMetadataManager::LoadMetadataChunk_Internal(const char *chunkName, const
 		}
 	}
 
-	const char *ext = __BANK ? "" : ".rel";
+	const char *ext = !__PACKEDDEBUG ? "" : ".rel";
 
 	if(m_SchemaVersion != ~0U)
 	{
diff --git a/rage/base/src/audioengine/soundfactory.cpp b/rage/base/src/audioengine/soundfactory.cpp
index 31279bbf..82819197 100644
--- a/rage/base/src/audioengine/soundfactory.cpp
+++ b/rage/base/src/audioengine/soundfactory.cpp
@@ -140,7 +140,7 @@ audSound *audSoundFactory::GetInstanceFromMetadata(const void *metadata, audSoun
 				pSound->PostInitAsParent(parentInitParams);
 				audSound::GetStaticPool().MarkSoundSlotAsParent(initParams->BucketId, audSound::GetStaticPool().GetSoundSlotIndex(initParams->BucketId, pSound));			
 
-#if __BANK								
+#if __USEDEBUGAUDIO								
 				const u32 slotsUsed = sm_BucketSoundCount[initParams->BucketId].PeakSoundSlotsForHierarchy;
 				if(initParams->IsAuditioning || (PARAM_printlargesounds.Get() && (sm_BucketSoundCount[initParams->BucketId].NumSoundsCreatedInHierarchy > 40 || slotsUsed > 40)))
 				{
@@ -154,7 +154,7 @@ audSound *audSoundFactory::GetInstanceFromMetadata(const void *metadata, audSoun
 	}
 	else
 	{
-#if __BANK
+#if __USEDEBUGAUDIO
 		if(m_MetadataMgr.IsRAVEConnected())
 		{
 			if(audSound::GetStaticPool().GetBucket(initParams->BucketId)->numSoundSlotsFree == 0)
diff --git a/rage/base/src/audioengine/soundpool.cpp b/rage/base/src/audioengine/soundpool.cpp
index b6aa9f4b..01cf58d4 100644
--- a/rage/base/src/audioengine/soundpool.cpp
+++ b/rage/base/src/audioengine/soundpool.cpp
@@ -928,23 +928,26 @@ void audSoundPool::PointerRangeTrapCheck(void* TRAP_ONLY(p), u32 TRAP_ONLY(size)
 #if __BANK
 
 void audSoundPool::DebugDrawBuckets(f32 yScroll, u32 numSoundsPerBucket) const
-{	
+{
+	(void)yScroll;
+	(void)numSoundsPerBucket;
+#if __USEDEBUGAUDIO
 	f32 yCoord = 0.05f - yScroll;
 	f32 stepRate = 0.02f;
 
-	for(u32 bucketIndex = 0; bucketIndex < m_NumBuckets; bucketIndex++)
+	for (u32 bucketIndex = 0; bucketIndex < m_NumBuckets; bucketIndex++)
 	{
 		f32 xCoord = 0.05f;
 		const audSoundPoolBucket& rBucket = m_Buckets[bucketIndex];
 		const u32 numSoundSlotsFree = rBucket.numSoundSlotsFree;
 		char tempString[128];
-		formatf(tempString, "Bucket %d: Slots Free: %d/%d (%.02f%%)", bucketIndex, numSoundSlotsFree, m_NumSoundSlotsPerBucketAligned, ((numSoundSlotsFree/(f32)m_NumSoundSlotsPerBucketAligned) * 100));
-		grcDebugDraw::Text(Vector2(xCoord, yCoord), Color32(255,255,255), tempString);
+		formatf(tempString, "Bucket %d: Slots Free: %d/%d (%.02f%%)", bucketIndex, numSoundSlotsFree, m_NumSoundSlotsPerBucketAligned, ((numSoundSlotsFree / (f32)m_NumSoundSlotsPerBucketAligned) * 100));
+		grcDebugDraw::Text(Vector2(xCoord, yCoord), Color32(255, 255, 255), tempString);
 		yCoord += stepRate;
 		xCoord += stepRate;
 
 		audSound::GetStaticPool().LockBucket(bucketIndex);
-		atFixedBitSet<g_audMaxSoundSlotsPerBucket> allocationState;	
+		atFixedBitSet<g_audMaxSoundSlotsPerBucket> allocationState;
 		ComputeSoundSlotAllocationState(bucketIndex, allocationState);
 
 		struct SoundInstance
@@ -956,29 +959,29 @@ void audSoundPool::DebugDrawBuckets(f32 yScroll, u32 numSoundsPerBucket) const
 
 		atFixedArray<SoundInstance, g_audMaxSoundSlotsPerBucket> soundInstances;
 
-		for(u32 i = 0 ; i < m_NumSoundSlotsPerBucketAligned>>5; i++)
-		{			
-			for(u32 j = 0; j < 32; j++)
+		for (u32 i = 0; i < m_NumSoundSlotsPerBucketAligned >> 5; i++)
+		{
+			for (u32 j = 0; j < 32; j++)
 			{
-				const u32 slotId = (i<<5) + j;
+				const u32 slotId = (i << 5) + j;
 
 				// check this slot is allocated and its of type 0 (sound)
-				if(slotId < g_audMaxSoundSlotsPerBucket && allocationState.IsSet(slotId))
+				if (slotId < g_audMaxSoundSlotsPerBucket && allocationState.IsSet(slotId))
 				{
-					if(rBucket.soundSlotAllocationType.IsClear(slotId))
+					if (rBucket.soundSlotAllocationType.IsClear(slotId))
 					{
-						audSound *sound = (audSound*)((u8*)rBucket.baseSoundPtr + slotId * m_SoundSlotSize);
+						audSound* sound = (audSound*)((u8*)rBucket.baseSoundPtr + slotId * m_SoundSlotSize);
 
-						if(sound)
+						if (sound)
 						{
 							bool found = false;
 							const u32 nameTableOffset = sound->GetNameTableOffset();
 
-							if(nameTableOffset != 0xFFFFFF)
+							if (nameTableOffset != 0xFFFFFF)
 							{
-								for(SoundInstance& existingInstance : soundInstances)
+								for (SoundInstance& existingInstance : soundInstances)
 								{
-									if(existingInstance.nto == nameTableOffset)
+									if (existingInstance.nto == nameTableOffset)
 									{
 										existingInstance.count++;
 										existingInstance.stateCounts[sound->GetPlayState()]++;
@@ -987,7 +990,7 @@ void audSoundPool::DebugDrawBuckets(f32 yScroll, u32 numSoundsPerBucket) const
 									}
 								}
 
-								if(!found)
+								if (!found)
 								{
 									SoundInstance newInstance;
 									newInstance.nto = nameTableOffset;
@@ -996,43 +999,43 @@ void audSoundPool::DebugDrawBuckets(f32 yScroll, u32 numSoundsPerBucket) const
 									newInstance.stateCounts[sound->GetPlayState()] = 1;
 									soundInstances.Push(newInstance);
 								}
-							}							
+							}
 						}
 					}
 				}
 			}
 		}
 
-		soundInstances.QSort(0,- 1, [](const SoundInstance* a, const SoundInstance* b) -> int
-		{		
-			if(a->count > b->count)
+		soundInstances.QSort(0, -1, [](const SoundInstance* a, const SoundInstance* b) -> int
 			{
-				return -1;
-			}
-			else if(a->count < b->count)
-			{
-				return 1;
-			}
-			else
-			{				
-				return a->nto < b->nto ? -1 : 1;
-			}			
-		});
-		
-		for(u32 sortedInstance = 0; sortedInstance < numSoundsPerBucket; sortedInstance++)
+				if (a->count > b->count)
+				{
+					return -1;
+				}
+				else if (a->count < b->count)
+				{
+					return 1;
+				}
+				else
+				{
+					return a->nto < b->nto ? -1 : 1;
+				}
+			});
+
+		for (u32 sortedInstance = 0; sortedInstance < numSoundsPerBucket; sortedInstance++)
 		{
-			if(sortedInstance < (u32)soundInstances.GetCount())
+			if (sortedInstance < (u32)soundInstances.GetCount())
 			{
-				formatf(tempString, "%s (%u %s - %d dormant, %d preparing, %d playing, %d deleting)", 
-						g_AudioEngine.GetSoundManager().GetFactory().GetMetadataManager().GetNameFromNTO_Debug(soundInstances[sortedInstance].nto), 
-						soundInstances[sortedInstance].count, 
-						soundInstances[sortedInstance].count > 1 ? "instances" : "instance", 
-						soundInstances[sortedInstance].stateCounts[AUD_SOUND_DORMANT],
-						soundInstances[sortedInstance].stateCounts[AUD_SOUND_PREPARING],
-						soundInstances[sortedInstance].stateCounts[AUD_SOUND_PLAYING],
-						soundInstances[sortedInstance].stateCounts[AUD_SOUND_WAITING_TO_BE_DELETED]);
-
-				grcDebugDraw::Text(Vector2(xCoord, yCoord), Color32(255,255,255), tempString);
+				formatf(tempString, "%s (%u %s - %d dormant, %d preparing, %d playing, %d deleting)",
+					g_AudioEngine.GetSoundManager().GetFactory().GetMetadataManager().GetNameFromNTO_Debug(soundInstances[sortedInstance].nto),
+					soundInstances[sortedInstance].count,
+					soundInstances[sortedInstance].count > 1 ? "instances" : "instance",
+					soundInstances[sortedInstance].stateCounts[AUD_SOUND_DORMANT],
+					soundInstances[sortedInstance].stateCounts[AUD_SOUND_PREPARING],
+					soundInstances[sortedInstance].stateCounts[AUD_SOUND_PLAYING],
+					soundInstances[sortedInstance].stateCounts[AUD_SOUND_WAITING_TO_BE_DELETED]);
+
+				grcDebugDraw::Text(Vector2(xCoord, yCoord), Color32(255, 255, 255), tempString);
 			}
 
 			yCoord += stepRate;
@@ -1041,6 +1044,7 @@ void audSoundPool::DebugDrawBuckets(f32 yScroll, u32 numSoundsPerBucket) const
 		audSound::GetStaticPool().UnlockBucket(bucketIndex);
 		yCoord += stepRate;
 	}
+#endif
 }
 
 void audSoundPool::ComputeSoundSlotAllocationState(const u32 bucketId, atFixedBitSet<g_audMaxSoundSlotsPerBucket> &allocationState) const
diff --git a/rage/base/src/audioengine/soundset.cpp b/rage/base/src/audioengine/soundset.cpp
index f9883a8d..bec12a3d 100644
--- a/rage/base/src/audioengine/soundset.cpp
+++ b/rage/base/src/audioengine/soundset.cpp
@@ -23,7 +23,7 @@ namespace rage
 		if(metadata)
 		{
 			m_Data = metadata;
-#if __ASSERT
+#if __USEDEBUGAUDIO
 			// validate sorting
 			for(u32 i = 1; i < m_Data->numSounds; i++)
 			{
@@ -66,7 +66,7 @@ namespace rage
 
 	audMetadataRef audSoundSet::Find(const u32 nameHash) const
 	{
-#if RSG_BANK
+#if __USEDEBUGAUDIO
 		// Reinitialise to pick up RAVE edits that override our metadata.
 		if(m_Data && g_AudioEngine.GetSoundManager().GetFactory().GetMetadataManager().IsRAVEConnected())
 		{
diff --git a/rage/base/src/audiosoundtypes/environmentsound.cpp b/rage/base/src/audiosoundtypes/environmentsound.cpp
index 5eb71e8c..1d7c5061 100644
--- a/rage/base/src/audiosoundtypes/environmentsound.cpp
+++ b/rage/base/src/audiosoundtypes/environmentsound.cpp
@@ -290,7 +290,7 @@ bool audEnvironmentSound::Init(const void *metadata, const audSoundInternalInitP
 
 	if(m_CategoryIndex == 0 && !initParams->IsAuditioning)
 	{
-#if __BANK
+#if __USEDEBUGAUDIO
 		const audSound *parent = GetTopLevelParent();
 		static const u32 ignoreList[] = {
 			0
diff --git a/rage/base/src/audiosoundtypes/sound.cpp b/rage/base/src/audiosoundtypes/sound.cpp
index 29039c35..51040ada 100644
--- a/rage/base/src/audiosoundtypes/sound.cpp
+++ b/rage/base/src/audiosoundtypes/sound.cpp
@@ -360,7 +360,9 @@ audSound::~audSound()
 #if !__SPU
 bool audSound::Init(const void *pMetadata, const audSoundInternalInitParams* initParams, audSoundScratchInitParams *scratchInitParams)
 {
+#if __USEDEBUGAUDIO
 	SoundAssert(m_SoundFlags.IsInitialising);
+#endif
 
 	if (!initParams || !pMetadata)
 	{
@@ -432,7 +434,7 @@ bool audSound::Init(const void *pMetadata, const audSoundInternalInitParams* ini
 	// Set up our local params based on the InitParams struct
 	SetCanBeRemovedFromHierarchy(initParams->RemoveHierarchy);
 
-#if __BANK
+#if __USEDEBUGAUDIO
 	if(audSoundManager::ShouldBreakOnCreate(this))
 	{
 		audWarningf("Debug breaking on sound %s creation", this->GetName());
@@ -717,8 +719,9 @@ void audSound::SetForceMuteEnabled(bool enabled)
 
 void BreakOnNameChanged()
 {
-	const Sound *sound = SOUNDFACTORY.GetMetadataPtr(atStringHash(g_BreakOnNameBuf));
-	if(sound)
+#if __USEDEBUGAUDIO
+	const Sound* sound = SOUNDFACTORY.GetMetadataPtr(atStringHash(g_BreakOnNameBuf));
+	if (sound)
 	{
 		g_BreakOnNameTableOffset = sound->NameTableOffset;
 		g_BreakOnSoundUpdate = true;
@@ -729,6 +732,7 @@ void BreakOnNameChanged()
 	{
 		audDisplayf("Invalid breakpoint sound name: %s", g_BreakOnNameBuf);
 	}
+#endif
 }
 
 void audSound::AddWidgets(bkBank &bank)
@@ -886,7 +890,7 @@ void audSound::PrepareAndPlay(audWaveSlot* waveSlot, bool allowLoad, s32 timeLim
 
 void audSound::_ManagedAudioPlay(u32 timeInMs, audSoundCombineBuffer combineBuffer)
 {
-#if __BANK && !__SPU
+#if __USEDEBUGAUDIO && !__SPU
 	if(g_BreakOnSoundPlay && ((g_BreakOnNameTableOffset == m_BaseMetadata->NameTableOffset) || (m_InitParams.BucketId == g_BreakOnSoundBucketId && sm_Pool.GetSoundSlotIndex(m_InitParams.BucketId, this) == g_BreakOnSoundSlotId)))
 	{
 		__debugbreak();
@@ -969,7 +973,7 @@ void audSound::Stop()
 
 void audSound::StopAndForget(bool continueUpdatingEntity)
 {
-#if __BANK
+#if __USEDEBUGAUDIO
 	if(audSoundManager::ShouldBreakOnStop(this))
 	{
 		audWarningf("Debug breaking on sound %s stopping", this->GetName());
@@ -1151,7 +1155,7 @@ bool audSound::_ManagedAudioUpdate(u32 timeInMs, audSoundCombineBuffer combineBu
 {
 	bool shouldRemoveFromHierarchy = false;
 
-#if __BANK && !__SPU
+#if __USEDEBUGAUDIO && !__SPU
 	if(g_BreakOnSoundUpdate && ((g_BreakOnNameTableOffset == m_BaseMetadata->NameTableOffset) || (m_InitParams.BucketId == g_BreakOnSoundBucketId && sm_Pool.GetSoundSlotIndex(m_InitParams.BucketId, this) == g_BreakOnSoundSlotId)))
 	{
 		__debugbreak();
@@ -2323,7 +2327,7 @@ char g_SoundName[128];
 
 const char *audSound::GetName() const
 {
-#if RSG_BANK
+#if __USEDEBUGAUDIO
 
 #if RSG_SPU
 
diff --git a/rage/base/src/audiosoundtypes/sounddefs.h b/rage/base/src/audiosoundtypes/sounddefs.h
index 72da52fb..5da19acc 100644
--- a/rage/base/src/audiosoundtypes/sounddefs.h
+++ b/rage/base/src/audiosoundtypes/sounddefs.h
@@ -306,7 +306,7 @@ namespace rage
 			
 			Sound() :
 				ClassId(0xFF),
-				BANK_ONLY(NameTableOffset(0XFFFFFF),)
+				DEBUGAUDIO_ONLY(NameTableOffset(0XFFFFFF),)
 				Compression(0xFFFFFFFF),
 				Flags(0xAAAAAAAA),
 				Volume(0),
@@ -341,12 +341,12 @@ namespace rage
 			// PURPOSE - Returns a pointer to the field whose name is specified by the hash
 			void* GetFieldPtr(const rage::u32 fieldNameHash);
 			
-			#if __BANK
+			#if __USEDEBUGAUDIO
 			rage::u32 ClassId : 8;
 			rage::u32 NameTableOffset : 24;
 			#else
 			rage::u8 ClassId;
-			#endif // __BANK
+			#endif // __USEDEBUGAUDIO
 			rage::u32 Compression;
 			rage::u32 Flags;
 			
@@ -1955,19 +1955,19 @@ namespace rage
 			
 			SoundSet() :
 				ClassId(0xFF),
-				BANK_ONLY(NameTableOffset(0XFFFFFF),)
+				DEBUGAUDIO_ONLY(NameTableOffset(0XFFFFFF),)
 				Flags(0xAAAAAAAA)
 			{}
 			
 			// PURPOSE - Returns a pointer to the field whose name is specified by the hash
 			void* GetFieldPtr(const rage::u32 fieldNameHash);
 			
-			#if __BANK
+			#if __USEDEBUGAUDIO
 			rage::u32 ClassId : 8;
 			rage::u32 NameTableOffset : 24;
 			#else
 			rage::u8 ClassId;
-			#endif // __BANK
+			#endif // __USEDEBUGAUDIO
 			rage::u32 Flags;
 			
 			
@@ -1996,19 +1996,19 @@ namespace rage
 			
 			NoteMap() :
 				ClassId(0xFF),
-				BANK_ONLY(NameTableOffset(0XFFFFFF),)
+				DEBUGAUDIO_ONLY(NameTableOffset(0XFFFFFF),)
 				Flags(0xAAAAAAAA)
 			{}
 			
 			// PURPOSE - Returns a pointer to the field whose name is specified by the hash
 			void* GetFieldPtr(const rage::u32 fieldNameHash);
 			
-			#if __BANK
+			#if __USEDEBUGAUDIO
 			rage::u32 ClassId : 8;
 			rage::u32 NameTableOffset : 24;
 			#else
 			rage::u8 ClassId;
-			#endif // __BANK
+			#endif // __USEDEBUGAUDIO
 			rage::u32 Flags;
 			
 			
@@ -2039,19 +2039,19 @@ namespace rage
 			
 			SoundSetList() :
 				ClassId(0xFF),
-				BANK_ONLY(NameTableOffset(0XFFFFFF),)
+				DEBUGAUDIO_ONLY(NameTableOffset(0XFFFFFF),)
 				Flags(0xAAAAAAAA)
 			{}
 			
 			// PURPOSE - Returns a pointer to the field whose name is specified by the hash
 			void* GetFieldPtr(const rage::u32 fieldNameHash);
 			
-			#if __BANK
+			#if __USEDEBUGAUDIO
 			rage::u32 ClassId : 8;
 			rage::u32 NameTableOffset : 24;
 			#else
 			rage::u8 ClassId;
-			#endif // __BANK
+			#endif // __USEDEBUGAUDIO
 			rage::u32 Flags;
 			
 			
@@ -2079,7 +2079,7 @@ namespace rage
 			
 			SoundHashList() :
 				ClassId(0xFF),
-				BANK_ONLY(NameTableOffset(0XFFFFFF),)
+				DEBUGAUDIO_ONLY(NameTableOffset(0XFFFFFF),)
 				Flags(0xAAAAAAAA),
 				CurrentSoundIdx(0)
 			{}
@@ -2087,12 +2087,12 @@ namespace rage
 			// PURPOSE - Returns a pointer to the field whose name is specified by the hash
 			void* GetFieldPtr(const rage::u32 fieldNameHash);
 			
-			#if __BANK
+			#if __USEDEBUGAUDIO
 			rage::u32 ClassId : 8;
 			rage::u32 NameTableOffset : 24;
 			#else
 			rage::u8 ClassId;
-			#endif // __BANK
+			#endif // __USEDEBUGAUDIO
 			rage::u32 Flags;
 			
 			rage::u16 CurrentSoundIdx;
diff --git a/rage/base/src/forceinclude/win64_bankrelease.h b/rage/base/src/forceinclude/win64_bankrelease.h
index 1a51dbc9..042fe232 100644
--- a/rage/base/src/forceinclude/win64_bankrelease.h
+++ b/rage/base/src/forceinclude/win64_bankrelease.h
@@ -204,6 +204,11 @@ END_NS_RAGE
 #define __TOOL		0
 #define __EXPORTER	0
 #define	__PROFILE	0
+#define	__PACKEDDEBUG	1
+#define	__SKIPDEBUGAUTH	1
+#define	__USEDEBUGAUDIO	0
+#define DEBUGAUDIO_ONLY(...)
+#define DEBUGUNPACKED_ONLY(...)
 #define RSG_DEV		__DEV
 #define RSG_BANK	__BANK
 #define RSG_ASSERT	__ASSERT
diff --git a/rage/base/src/forceinclude/win64_beta.h b/rage/base/src/forceinclude/win64_beta.h
index 1bbde58f..2b2b5825 100644
--- a/rage/base/src/forceinclude/win64_beta.h
+++ b/rage/base/src/forceinclude/win64_beta.h
@@ -204,6 +204,11 @@ END_NS_RAGE
 #define __TOOL		0
 #define __EXPORTER	0
 #define	__PROFILE	0
+#define	__PACKEDDEBUG	1
+#define	__SKIPDEBUGAUTH	1
+#define	__USEDEBUGAUDIO	0
+#define DEBUGAUDIO_ONLY(...)
+#define DEBUGUNPACKED_ONLY(...)
 #define RSG_DEV		__DEV
 #define RSG_BANK	__BANK
 #define RSG_ASSERT	__ASSERT
diff --git a/rage/base/src/forceinclude/win64_debug.h b/rage/base/src/forceinclude/win64_debug.h
index 80c54617..81a0bc15 100644
--- a/rage/base/src/forceinclude/win64_debug.h
+++ b/rage/base/src/forceinclude/win64_debug.h
@@ -204,6 +204,11 @@ END_NS_RAGE
 #define __TOOL		0
 #define __EXPORTER	0
 #define	__PROFILE	0
+#define	__PACKEDDEBUG	1
+#define	__SKIPDEBUGAUTH	1
+#define	__USEDEBUGAUDIO	0
+#define DEBUGAUDIO_ONLY(...)
+#define DEBUGUNPACKED_ONLY(...)
 #define RSG_DEV		__DEV
 #define RSG_BANK	__BANK
 #define RSG_ASSERT	__ASSERT
diff --git a/rage/base/src/forceinclude/win64_final.h b/rage/base/src/forceinclude/win64_final.h
index 9aea912d..6bf1b397 100644
--- a/rage/base/src/forceinclude/win64_final.h
+++ b/rage/base/src/forceinclude/win64_final.h
@@ -204,6 +204,11 @@ END_NS_RAGE
 #define __TOOL		0
 #define __EXPORTER	0
 #define	__PROFILE	0
+#define	__PACKEDDEBUG	1
+#define	__SKIPDEBUGAUTH	1
+#define	__USEDEBUGAUDIO	0
+#define DEBUGAUDIO_ONLY(...)
+#define DEBUGUNPACKED_ONLY(...)
 #define RSG_DEV		__DEV
 #define RSG_BANK	__BANK
 #define RSG_ASSERT	__ASSERT
diff --git a/rage/base/src/forceinclude/win64_gametoolbeta.h b/rage/base/src/forceinclude/win64_gametoolbeta.h
index d639e415..e1ae3340 100644
--- a/rage/base/src/forceinclude/win64_gametoolbeta.h
+++ b/rage/base/src/forceinclude/win64_gametoolbeta.h
@@ -205,6 +205,11 @@ END_NS_RAGE
 #define __TOOL		0
 #define __EXPORTER	0
 #define	__PROFILE	0
+#define	__PACKEDDEBUG	1
+#define	__SKIPDEBUGAUTH	1
+#define	__USEDEBUGAUDIO	0
+#define DEBUGAUDIO_ONLY(...)
+#define DEBUGUNPACKED_ONLY(...)
 #define RSG_DEV		__DEV
 #define RSG_BANK	__BANK
 #define RSG_ASSERT	__ASSERT
diff --git a/rage/base/src/forceinclude/win64_gametooldebug.h b/rage/base/src/forceinclude/win64_gametooldebug.h
index a453fc81..e7007b0a 100644
--- a/rage/base/src/forceinclude/win64_gametooldebug.h
+++ b/rage/base/src/forceinclude/win64_gametooldebug.h
@@ -205,6 +205,11 @@ END_NS_RAGE
 #define __TOOL		0
 #define __EXPORTER	0
 #define	__PROFILE	0
+#define	__PACKEDDEBUG	1
+#define	__SKIPDEBUGAUTH	1
+#define	__USEDEBUGAUDIO	0
+#define DEBUGAUDIO_ONLY(...)
+#define DEBUGUNPACKED_ONLY(...)
 #define RSG_DEV		__DEV
 #define RSG_BANK	__BANK
 #define RSG_ASSERT	__ASSERT
diff --git a/rage/base/src/forceinclude/win64_gametoolrelease.h b/rage/base/src/forceinclude/win64_gametoolrelease.h
index df988bc0..e1b0cbbf 100644
--- a/rage/base/src/forceinclude/win64_gametoolrelease.h
+++ b/rage/base/src/forceinclude/win64_gametoolrelease.h
@@ -205,6 +205,11 @@ END_NS_RAGE
 #define __TOOL		0
 #define __EXPORTER	0
 #define	__PROFILE	0
+#define	__PACKEDDEBUG	1
+#define	__SKIPDEBUGAUTH	1
+#define	__USEDEBUGAUDIO	0
+#define DEBUGAUDIO_ONLY(...)
+#define DEBUGUNPACKED_ONLY(...)
 #define RSG_DEV		__DEV
 #define RSG_BANK	__BANK
 #define RSG_ASSERT	__ASSERT
diff --git a/rage/base/src/forceinclude/win64_master.h b/rage/base/src/forceinclude/win64_master.h
index 49a15b7a..430a4b59 100644
--- a/rage/base/src/forceinclude/win64_master.h
+++ b/rage/base/src/forceinclude/win64_master.h
@@ -204,6 +204,11 @@ END_NS_RAGE
 #define __TOOL		0
 #define __EXPORTER	0
 #define	__PROFILE	0
+#define	__PACKEDDEBUG	1
+#define	__SKIPDEBUGAUTH	1
+#define	__USEDEBUGAUDIO	0
+#define DEBUGAUDIO_ONLY(...)
+#define DEBUGUNPACKED_ONLY(...)
 #define RSG_DEV		__DEV
 #define RSG_BANK	__BANK
 #define RSG_ASSERT	__ASSERT
diff --git a/rage/base/src/forceinclude/win64_profile.h b/rage/base/src/forceinclude/win64_profile.h
index 277e4d82..011e12ba 100644
--- a/rage/base/src/forceinclude/win64_profile.h
+++ b/rage/base/src/forceinclude/win64_profile.h
@@ -204,6 +204,11 @@ END_NS_RAGE
 #define __TOOL		0
 #define __EXPORTER	0
 #define	__PROFILE	1
+#define	__PACKEDDEBUG	1
+#define	__SKIPDEBUGAUTH	1
+#define	__USEDEBUGAUDIO	0
+#define DEBUGAUDIO_ONLY(...)
+#define DEBUGUNPACKED_ONLY(...)
 #define RSG_DEV		__DEV
 #define RSG_BANK	__BANK
 #define RSG_ASSERT	__ASSERT
diff --git a/rage/base/src/forceinclude/win64_release.h b/rage/base/src/forceinclude/win64_release.h
index 52bd44f1..fcefc454 100644
--- a/rage/base/src/forceinclude/win64_release.h
+++ b/rage/base/src/forceinclude/win64_release.h
@@ -204,6 +204,11 @@ END_NS_RAGE
 #define __TOOL		0
 #define __EXPORTER	0
 #define	__PROFILE	0
+#define	__PACKEDDEBUG	1
+#define	__SKIPDEBUGAUTH	1
+#define	__USEDEBUGAUDIO	0
+#define DEBUGAUDIO_ONLY(...)
+#define DEBUGUNPACKED_ONLY(...)
 #define RSG_DEV		__DEV
 #define RSG_BANK	__BANK
 #define RSG_ASSERT	__ASSERT
diff --git a/rage/base/src/forceinclude/win64_rscbeta.h b/rage/base/src/forceinclude/win64_rscbeta.h
index 9da3bed2..330f25a2 100644
--- a/rage/base/src/forceinclude/win64_rscbeta.h
+++ b/rage/base/src/forceinclude/win64_rscbeta.h
@@ -205,6 +205,11 @@ END_NS_RAGE
 #define __TOOL		0
 #define __EXPORTER	0
 #define	__PROFILE	0
+#define	__PACKEDDEBUG	1
+#define	__SKIPDEBUGAUTH	1
+#define	__USEDEBUGAUDIO	0
+#define DEBUGAUDIO_ONLY(...)
+#define DEBUGUNPACKED_ONLY(...)
 #define RSG_DEV		__DEV
 #define RSG_BANK	__BANK
 #define RSG_ASSERT	__ASSERT
diff --git a/rage/base/src/forceinclude/win64_rscdebug.h b/rage/base/src/forceinclude/win64_rscdebug.h
index c6ccd157..6934f7f9 100644
--- a/rage/base/src/forceinclude/win64_rscdebug.h
+++ b/rage/base/src/forceinclude/win64_rscdebug.h
@@ -205,6 +205,11 @@ END_NS_RAGE
 #define __TOOL		0
 #define __EXPORTER	0
 #define	__PROFILE	0
+#define	__PACKEDDEBUG	1
+#define	__SKIPDEBUGAUTH	1
+#define	__USEDEBUGAUDIO	0
+#define DEBUGAUDIO_ONLY(...)
+#define DEBUGUNPACKED_ONLY(...)
 #define RSG_DEV		__DEV
 #define RSG_BANK	__BANK
 #define RSG_ASSERT	__ASSERT
diff --git a/rage/base/src/forceinclude/win64_rscrelease.h b/rage/base/src/forceinclude/win64_rscrelease.h
index 0c3be297..953598d3 100644
--- a/rage/base/src/forceinclude/win64_rscrelease.h
+++ b/rage/base/src/forceinclude/win64_rscrelease.h
@@ -205,6 +205,11 @@ END_NS_RAGE
 #define __TOOL		0
 #define __EXPORTER	0
 #define	__PROFILE	0
+#define	__PACKEDDEBUG	1
+#define	__SKIPDEBUGAUTH	1
+#define	__USEDEBUGAUDIO	0
+#define DEBUGAUDIO_ONLY(...)
+#define DEBUGUNPACKED_ONLY(...)
 #define RSG_DEV		__DEV
 #define RSG_BANK	__BANK
 #define RSG_ASSERT	__ASSERT
diff --git a/rage/base/src/forceinclude/win64_toolbeta.h b/rage/base/src/forceinclude/win64_toolbeta.h
index 3d8924be..dd0b1c25 100644
--- a/rage/base/src/forceinclude/win64_toolbeta.h
+++ b/rage/base/src/forceinclude/win64_toolbeta.h
@@ -202,6 +202,11 @@ END_NS_RAGE
 #define __TOOL		1
 #define __EXPORTER	0
 #define	__PROFILE	0
+#define	__PACKEDDEBUG	1
+#define	__SKIPDEBUGAUTH	1
+#define	__USEDEBUGAUDIO	0
+#define DEBUGAUDIO_ONLY(...)
+#define DEBUGUNPACKED_ONLY(...)
 #define RSG_DEV		__DEV
 #define RSG_BANK	__BANK
 #define RSG_ASSERT	__ASSERT
diff --git a/rage/base/src/forceinclude/win64_tooldebug.h b/rage/base/src/forceinclude/win64_tooldebug.h
index 12ca9882..631def42 100644
--- a/rage/base/src/forceinclude/win64_tooldebug.h
+++ b/rage/base/src/forceinclude/win64_tooldebug.h
@@ -202,6 +202,11 @@ END_NS_RAGE
 #define __TOOL		1
 #define __EXPORTER	0
 #define	__PROFILE	0
+#define	__PACKEDDEBUG	1
+#define	__SKIPDEBUGAUTH	1
+#define	__USEDEBUGAUDIO	0
+#define DEBUGAUDIO_ONLY(...)
+#define DEBUGUNPACKED_ONLY(...)
 #define RSG_DEV		__DEV
 #define RSG_BANK	__BANK
 #define RSG_ASSERT	__ASSERT
diff --git a/rage/base/src/forceinclude/win64_toolrelease.h b/rage/base/src/forceinclude/win64_toolrelease.h
index 29f17652..b00cd550 100644
--- a/rage/base/src/forceinclude/win64_toolrelease.h
+++ b/rage/base/src/forceinclude/win64_toolrelease.h
@@ -202,6 +202,11 @@ END_NS_RAGE
 #define __TOOL		1
 #define __EXPORTER	0
 #define	__PROFILE	0
+#define	__PACKEDDEBUG	1
+#define	__SKIPDEBUGAUTH	1
+#define	__USEDEBUGAUDIO	0
+#define DEBUGAUDIO_ONLY(...)
+#define DEBUGUNPACKED_ONLY(...)
 #define RSG_DEV		__DEV
 #define RSG_BANK	__BANK
 #define RSG_ASSERT	__ASSERT
diff --git a/rage/base/src/rline/rlpresence.cpp b/rage/base/src/rline/rlpresence.cpp
index 715f6e5d..4ea1375f 100644
--- a/rage/base/src/rline/rlpresence.cpp
+++ b/rage/base/src/rline/rlpresence.cpp
@@ -2892,7 +2892,7 @@ rlPresence::RefreshSigninState(const int gamerIdx)
                   handleStr);
 #endif
 
-#if !__FINAL
+#if !__SKIPDEBUGAUTH
         //Make sure we're preventing people from seeing secret
         //stuff in our games during dev.
         rlGamerInfo::CheckDevPrivacyPrivilegesAndBail(newGamerInfo.GetLocalIndex());
diff --git a/rage/framework/src/streaming/CacheLoader.cpp b/rage/framework/src/streaming/CacheLoader.cpp
index 7f9e0e7d..a1282c8a 100644
--- a/rage/framework/src/streaming/CacheLoader.cpp
+++ b/rage/framework/src/streaming/CacheLoader.cpp
@@ -1216,7 +1216,7 @@ void strCacheLoader::BuildCacheFilename(const char* const pFilename)
 				"%s%s_cache_packaged_%c%s%s.dat", deviceAndPath,
 				ASSET.FileName(baseName),
 				g_sysHostPlatform,
-				( __BANK ? "_bank" : "" ),
+				(!__PACKEDDEBUG ? "_bank" : "" ),
 				ipAddress
 				);
 		}
@@ -1227,7 +1227,7 @@ void strCacheLoader::BuildCacheFilename(const char* const pFilename)
 				"%s%s_cache_%c%s%s.dat", deviceAndPath,
 				ASSET.FileName(baseName),
 				g_sysHostPlatform,
-				( __BANK ? "_bank" : "" ),
+				(!__PACKEDDEBUG ? "_bank" : "" ),
 				ipAddress
 			);
 		}
